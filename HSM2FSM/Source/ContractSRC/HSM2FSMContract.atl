module HSM2FSM;

create OUT : FSM from IN : HSM;



--POSTCONDITION FSM

 
--@post
helper context FSM!Transition def: post_fsm_transition_trg_multi_lower(): Boolean = --fsm_transition_trg_multi_lower
  FSM!Transition.allInstances()->forAll(t |not t.target.oclIsUndefined());

--@post
helper context FSM!Transition def: post_fsm_transition_src_multi_lower(): Boolean = --fsm_transition_src_multi_lower
  FSM!Transition.allInstances()->forAll(t |not t.source.oclIsUndefined());

--@post
helper context FSM!StateMachine def: post_unique_fsm_sm_names(): Boolean = --unique_fsm_sm_names
 FSM!StateMachine.allInstances()->forAll(s1 | 
  	FSM!StateMachine.allInstances()->forAll(s2 | 
  	  s1<>s2 implies s1.name<>s2.name));

--@post  
helper context FSM!AbstractState def: post_unique_fsm_state_names(): Boolean = --unique_fsm_state_names
  FSM!AbstractState.allInstances()->forAll(s1 |
  	FSM!AbstractState.allInstances()->forAll(s2 |
  	  s1<>s2 implies s1.name<>s2.name));	

--@post
helper context FSM!AbstractState def: post_fsm_state_multi_lower(): Boolean = --fsm_state_multi_lower
  FSM!AbstractState.allInstances()->forAll(s | not s.stateMachine.oclIsUndefined());
    
--@post
helper context FSM!Transition def: post_fsm_transition_multi_lower(): Boolean = --fsm_transition_multi_lower
  FSM!Transition.allInstances()->forAll(t | not t.stateMachine.oclIsUndefined());

--@post
helper context FSM!Transition def: post_fsm_transition_src_multi_upper(): Boolean = --fsm_transition_src_multi_upper
  FSM!Transition.allInstances()->forAll(t | 
   FSM!AbstractState.allInstances()->forAll(s1 | 
     FSM!AbstractState.allInstances()->forAll(s2 |
       (t.source=s1 and t.source=s2) implies s1=s2)));